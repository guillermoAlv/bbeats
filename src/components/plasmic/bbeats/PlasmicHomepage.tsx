// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9hA39KtYg3BevSMNGZjo8u
// Component: 1e7YzspgSepC
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Searchbar from "../../Searchbar"; // plasmic-import: Q-X2qK66L2/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: w9Z1u5YsRAUO/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_bbeats.module.css"; // plasmic-import: 9hA39KtYg3BevSMNGZjo8u/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: 1e7YzspgSepC/css

import ListasvgIcon from "./icons/PlasmicIcon__Listasvg"; // plasmic-import: 5StWiLnElt/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  headerSuggestionBox?: React.ReactNode;
  headerSearchBar?: React.ReactNode;
  heroSearchBar?: React.ReactNode;
  searchResults?: React.ReactNode;
  heroSuggestionBox?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>(
  "headerSuggestionBox",
  "headerSearchBar",
  "heroSearchBar",
  "searchResults",
  "heroSuggestionBox"
);

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<"header">;
  logoText?: p.Flex<"div">;
  burguerMobileMenuButton?: p.Flex<"svg">;
  headerSuggestionBox?: p.Flex<"div">;
  hero?: p.Flex<"div">;
  brandsBeats?: p.Flex<"div">;
  heroSuggestionBox?: p.Flex<"div">;
  searchResults?: p.Flex<"div">;
  footer?: p.Flex<"footer">;
};

export interface DefaultHomepageProps {
  headerSuggestionBox?: React.ReactNode;
  headerSearchBar?: React.ReactNode;
  heroSearchBar?: React.ReactNode;
  searchResults?: React.ReactNode;
  heroSuggestionBox?: React.ReactNode;
  className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div className={classNames(defaultcss.all, sty.box__zaK0T)}>
            <header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames(defaultcss.all, sty.header)}
            >
              <div
                data-plasmic-name={"logoText"}
                data-plasmic-override={overrides.logoText}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.logoText
                )}
              >
                {"Brands Beats"}
              </div>

              <p.PlasmicSlot
                defaultContents={
                  <Searchbar
                    className={classNames(
                      "__wab_instance",
                      sty.searchbar__gYPzb
                    )}
                  />
                }
                value={args.headerSearchBar}
              />

              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : false
              ) ? (
                <button
                  className={classNames(
                    defaultcss.button,
                    defaultcss.__wab_text,
                    sty.button__udyYs
                  )}
                >
                  {"Contacto"}
                </button>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : false
              ) ? (
                <button
                  className={classNames(
                    defaultcss.button,
                    defaultcss.__wab_text,
                    sty.button__dpLRk
                  )}
                >
                  {"FAQ"}
                </button>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : false
              ) ? (
                <button
                  className={classNames(
                    defaultcss.button,
                    defaultcss.__wab_text,
                    sty.button__qPjKd
                  )}
                >
                  {"Button Text"}
                </button>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : false
              ) ? (
                <button
                  className={classNames(
                    defaultcss.button,
                    defaultcss.__wab_text,
                    sty.button__hkr7C
                  )}
                >
                  {"Sobre nosotros"}
                </button>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : false
              ) ? (
                <button
                  className={classNames(
                    defaultcss.button,
                    defaultcss.__wab_text,
                    sty.button___6Z4O9
                  )}
                >
                  {"Suscríbete"}
                </button>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "desktop") ? false : true
              ) ? (
                <ListasvgIcon
                  data-plasmic-name={"burguerMobileMenuButton"}
                  data-plasmic-override={overrides.burguerMobileMenuButton}
                  className={classNames(
                    defaultcss.all,
                    sty.burguerMobileMenuButton
                  )}
                  role={"img"}
                />
              ) : null}

              <div
                data-plasmic-name={"headerSuggestionBox"}
                data-plasmic-override={overrides.headerSuggestionBox}
                className={classNames(defaultcss.all, sty.headerSuggestionBox)}
              >
                <p.PlasmicSlot
                  defaultContents={null}
                  value={args.headerSuggestionBox}
                />
              </div>
            </header>

            <div
              data-plasmic-name={"hero"}
              data-plasmic-override={overrides.hero}
              className={classNames(defaultcss.all, sty.hero)}
            >
              <div className={classNames(defaultcss.all, sty.box__xtMvh)}>
                <div className={classNames(defaultcss.all, sty.box__sl2Fp)}>
                  <div
                    data-plasmic-name={"brandsBeats"}
                    data-plasmic-override={overrides.brandsBeats}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.brandsBeats
                    )}
                  >
                    {"Brands Beats"}
                  </div>
                </div>

                <div className={classNames(defaultcss.all, sty.box__k5Ifp)}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__fDPv9
                    )}
                  >
                    {"Todos los ecommerce independientes de España y Portugal"}
                  </div>
                </div>

                <div className={classNames(defaultcss.all, sty.box__s5Bs)}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box___0R4Il
                    )}
                  >
                    {"Encuentra las marcas que cambian el mundo"}
                  </div>
                </div>

                {(
                  hasVariant(globalVariants, "screen", "desktop") ? true : false
                ) ? (
                  <div className={classNames(defaultcss.all, sty.box__drz7N)}>
                    <p.PlasmicSlot
                      defaultContents={
                        <Searchbar
                          className={classNames(
                            "__wab_instance",
                            sty.searchbar__ai0OK
                          )}
                        />
                      }
                      value={args.heroSearchBar}
                    />
                  </div>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "desktop") ? true : false
                ) ? (
                  <div
                    data-plasmic-name={"heroSuggestionBox"}
                    data-plasmic-override={overrides.heroSuggestionBox}
                    className={classNames(
                      defaultcss.all,
                      sty.heroSuggestionBox
                    )}
                  >
                    <p.PlasmicSlot
                      defaultContents={null}
                      value={args.heroSuggestionBox}
                    />
                  </div>
                ) : null}
              </div>
            </div>

            <div
              data-plasmic-name={"searchResults"}
              data-plasmic-override={overrides.searchResults}
              className={classNames(defaultcss.all, sty.searchResults)}
            >
              <p.PlasmicSlot
                defaultContents={null}
                value={args.searchResults}
              />
            </div>

            <footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames(defaultcss.all, sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "logoText",
    "burguerMobileMenuButton",
    "headerSuggestionBox",
    "hero",
    "brandsBeats",
    "heroSuggestionBox",
    "searchResults",
    "footer"
  ],
  header: [
    "header",
    "logoText",
    "burguerMobileMenuButton",
    "headerSuggestionBox"
  ],
  logoText: ["logoText"],
  burguerMobileMenuButton: ["burguerMobileMenuButton"],
  headerSuggestionBox: ["headerSuggestionBox"],
  hero: ["hero", "brandsBeats", "heroSuggestionBox"],
  brandsBeats: ["brandsBeats"],
  heroSuggestionBox: ["heroSuggestionBox"],
  searchResults: ["searchResults"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "header";
  logoText: "div";
  burguerMobileMenuButton: "svg";
  headerSuggestionBox: "div";
  hero: "div";
  brandsBeats: "div";
  heroSuggestionBox: "div";
  searchResults: "div";
  footer: "footer";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicHomepage__VariantsArgs;
  args?: PlasmicHomepage__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    logoText: makeNodeComponent("logoText"),
    burguerMobileMenuButton: makeNodeComponent("burguerMobileMenuButton"),
    headerSuggestionBox: makeNodeComponent("headerSuggestionBox"),
    hero: makeNodeComponent("hero"),
    brandsBeats: makeNodeComponent("brandsBeats"),
    heroSuggestionBox: makeNodeComponent("heroSuggestionBox"),
    searchResults: makeNodeComponent("searchResults"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
